<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Front-end on Levi&#39;s Blog</title>
    <link>https://leviduan.github.io/tags/front-end/</link>
    <description>Recent content in Front-end on Levi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2020</copyright>
    <lastBuildDate>Tue, 06 Oct 2020 16:14:00 +0800</lastBuildDate><atom:link href="https://leviduan.github.io/tags/front-end/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Native - AsyncStorage</title>
      <link>https://leviduan.github.io/posts/2020-10-06-1/</link>
      <pubDate>Tue, 06 Oct 2020 16:14:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-10-06-1/</guid>
      <description>AcyncStorage is a key/value-based storage system. It can be easily implemented and is globally available to the app. This persistence system is simple and asynchronous, and also a recommended way to store data. To create an AsyncStorage example application, execute the following command:
import { StyleSheet, Text, View, TextInput, Button, AsyncStorage } from &amp;#39;react-native&amp;#39;; constructor(props) { super(props); this.state = { storedText: &amp;#39;&amp;#39;, inputBoxText: &amp;#39;&amp;#39;} } In constructor we have specified blank values for stredText and inputBoxText, which we will keep updating as and when their state changes.</description>
    </item>
    
    <item>
      <title>React native - react-native-camera</title>
      <link>https://leviduan.github.io/posts/2020-09-28_01/</link>
      <pubDate>Mon, 28 Sep 2020 01:41:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-09-28_01/</guid>
      <description>When I developed this page, I needed a camera library, so I searched the keyword on google and then founded a great library, it called react-native-camera
Installation npm install --save react-native-camera@git+https://git@github.com/react-native-community/react-native-camera.git or yarn add react-native-camera@git+https://git@github.com/react-native-community/react-native-camera.git Use At first, we write the RNCamera class and get the view&amp;rsquo;s height and width from the onLayout void, onLayout void is used to output the same size picture.
Secondly, we check the device&amp;rsquo;s authority, if it doesn&amp;rsquo;t include the authority to visit the camera, jumping to the Setting page.</description>
    </item>
    
    <item>
      <title>React native network library - Axios</title>
      <link>https://leviduan.github.io/posts/2020-01-07_02/</link>
      <pubDate>Thu, 04 Jun 2020 07:00:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-07_02/</guid>
      <description>How to use axios in React Native
Axios Interceptors Axios interceptors allow us to run code or modify the request and response before the request and response is started.
In simple words, it allows you write or execute a piece of your code before the request gets sent.
Write into a file to package Axios The simple example:
import axios from &amp;#39;axios&amp;#39;; axios.defaults.retry = 4; axios.defaults.timeout = 10000; axios.defaults.headers.common[&amp;#39;x-dejafashion-ua&amp;#39;] = &amp;#39; &amp;#39; axios.</description>
    </item>
    
    <item>
      <title>React native - Loading Page</title>
      <link>https://leviduan.github.io/posts/2020-06-04_01/</link>
      <pubDate>Thu, 04 Jun 2020 06:00:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-06-04_01/</guid>
      <description>Sometimes the page is loading, we will keep a loading page to give user more user experience, how it works? We can use &amp;ldquo;Modal&amp;rdquo; and &amp;ldquo;ActivityIndicator&amp;rdquo; do it very well.
Let us start:
import { ActivityIndicator, Modal } from &amp;#39;react-native&amp;#39;; export default class Test extends React.Component { render() { return ( &amp;lt;Fragment&amp;gt; &amp;lt;StatusBar barStyle=&amp;#34;dark-content&amp;#34; /&amp;gt; &amp;lt;SafeAreaView style={styles.container}&amp;gt; &amp;lt;Modal transparent={true} animationType={&amp;#39;fade&amp;#39;} visible={this.state.isLoading} onRequestClose={() =&amp;gt; {console.log(&amp;#39;close modal&amp;#39;)}}&amp;gt; &amp;lt;View style={styles.modalBackground}&amp;gt; &amp;lt;View style={styles.activityIndicatorWrapper}&amp;gt; &amp;lt;ActivityIndicator style={styles.</description>
    </item>
    
    <item>
      <title>React native - AsyncStorage</title>
      <link>https://leviduan.github.io/posts/2020-01-08_01/</link>
      <pubDate>Wed, 08 Jan 2020 16:48:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-08_01/</guid>
      <description>Sometimes we have to use some ways to save data to the disk. Just like login status, React Native Async Storage is an asynchronous, unencrypted, persistent, key-value storage system for React Native, It’s used for a variety of scenarios but mainly to store data when your app is not using any cloud services, or when you want to implement features in your app that require data storage.
As a React Native developer, you have to know what these limitations are.</description>
    </item>
    
    <item>
      <title>React native - DeviceEventEmitter API</title>
      <link>https://leviduan.github.io/posts/2020-01-08_03/</link>
      <pubDate>Wed, 08 Jan 2020 16:48:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-08_03/</guid>
      <description>We usually use Notification in iOS just like this:
NotificationCenter.default.addObserver(self, selector: #selector(forYouRecommendUpdate), name: Notification.Name(rawValue: kDJForYouVCReloadAll), object: nil) NotificationCenter.default.post(name: Notification.Name(rawValue: kDJForYouVCReloadAll), object: nil) However, how to use a Notification in React native? The best way that we achieve it by DeviceEventEmitter
Usage Page A to register a Notification
import {DeviceEventEmitter} from &amp;#39;react-native&amp;#39;; DeviceEventEmitter.emit(&amp;#39;xxxName’,param); Page B to post a Notification
componentDidMount(){ this.listener =DeviceEventEmitter.addListener(&amp;#39;xxxName&amp;#39;,function(param){ // use param do something  }); } componentWillUnmount(){ this.</description>
    </item>
    
    <item>
      <title>React native - ScreenUtil Library</title>
      <link>https://leviduan.github.io/posts/2020-01-08_02/</link>
      <pubDate>Wed, 08 Jan 2020 16:48:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-08_02/</guid>
      <description>ScreenUtil.js is my tool JS file, you can use it simple. just like:
import * as ScreenUtil from &amp;#39;../../ScreenUtil&amp;#39;; style={{ width: ScreenUtil.screenW, height: ((ScreenUtil.screenW - 42) / 2.0 / 3.0) * 4.0, borderRadius: 5, overflow: &amp;#39;hidden&amp;#39;, }}&amp;gt; You can use this file by copying this code.
/** * 屏幕工具类 以及一些常用的工具类封装 * ui设计基准,iphone 6 2倍图 * width:750px * height:1334px * @2x */ import { PixelRatio, Dimensions, Platform, AsyncStorage } from &amp;#39;react-native&amp;#39;; export let screenW = Dimensions.</description>
    </item>
    
    <item>
      <title>React native - react-native-share</title>
      <link>https://leviduan.github.io/posts/2020-01-08_04/</link>
      <pubDate>Wed, 08 Jan 2020 13:48:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-08_04/</guid>
      <description>When we use share function, the best library is react-native-share. React Native Share, a simple tool for share message and file to other apps.
Git website: https://github.com/react-native-community/react-native-share/
Installation npm install react-native-share --save react-native link react-native-share cd ios &amp;amp;&amp;amp; pod install &amp;amp;&amp;amp; cd ../ Usage import Share from &amp;#39;react-native-share&amp;#39;; Share.open(options) .then((res) =&amp;gt; { console.log(res) }) .catch((err) =&amp;gt; { err &amp;amp;&amp;amp; console.log(err); }); Share.open({url : ScreenUtil.webUrl + &amp;#39;/streetsnapShareToPhoto?id=&amp;#39; + this.state.data.id, message: &amp;#34;Deja&amp;#34;}) .</description>
    </item>
    
    <item>
      <title>React native - Push Notification (Firebase)</title>
      <link>https://leviduan.github.io/posts/2020-01-07_01/</link>
      <pubDate>Tue, 07 Jan 2020 16:48:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-07_01/</guid>
      <description>How to add Push Notification in your project? I use firebase to send cloud message by Push Notification. First of all you click the website &amp;ldquo;https://rnfirebase.io/&amp;quot; , and click menu &amp;ldquo;Cloud Messaging&amp;rdquo;
Installation # Install &amp;amp; setup the app module yarn add @react-native-firebase/app # Install the messaging module yarn add @react-native-firebase/messaging # If you&#39;re developing your app using iOS, run this command cd ios/ &amp;amp;&amp;amp; pod install iOS Setup AppDelegate.m</description>
    </item>
    
    <item>
      <title>React native - Search bar</title>
      <link>https://leviduan.github.io/posts/2020-01-07_03/</link>
      <pubDate>Tue, 07 Jan 2020 06:00:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2020-01-07_03/</guid>
      <description>If you want to use SearchBar on React Native, the best choice is React Native Elements Library. you can use SearchBar module from React Native Elements.
The website: https://react-native-elements.github.io/react-native-elements/docs/input.html
Installation Step 1: Install react-native-elements
yarn add react-native-elements # or with npm npm install react-native-elements Step 2: Install react-native-vector-icons
# yarn yarn add react-native-vector-icons # or with npm npm i --save react-native-vector-icons # link react-native link react-native-vector-icons Ps: if Xcode run error - react-native-vector-icons iOS run error - &amp;lsquo;Multiple commands produce&amp;rsquo; error when building with new Xcode build system</description>
    </item>
    
    <item>
      <title>React native - ActionSheetIOS</title>
      <link>https://leviduan.github.io/posts/2019-12-30_01/</link>
      <pubDate>Mon, 30 Dec 2019 06:00:00 +0800</pubDate>
      
      <guid>https://leviduan.github.io/posts/2019-12-30_01/</guid>
      <description>Sometime, We need to make a actionsheet on Rect native，so the best way to do it by ActionSheetIOS API from react-native, however, ActionSheetIOS can not be used in Android mobile. so we need an unofficial library from github to achieve an Android ActionSheet UI.
choosing the github library from beefe/react-native-actionsheet
website: https://github.com/beefe/react-native-actionsheet/
Cross platform ActionSheet, This component implements a custom ActionSheet and provides the same way to drawing it on the different platforms (iOS and Android).</description>
    </item>
    
  </channel>
</rss>
